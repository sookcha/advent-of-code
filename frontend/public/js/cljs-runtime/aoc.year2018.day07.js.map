{"version":3,"sources":["aoc/year2018/day07.cljc"],"mappings":"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","names":["aoc.year2018.day07/get-requirements-map","content","cljs.core/re-seq","p1__42428#","cljs.core.map","cljs.core/rest","cljs.core.reduce","p__42429","vec__42430","cljs.core.nth","acc","first-id","second-id","cljs.core/contains?","cljs.core.update","v","cljs.core.conj","cljs.core.assoc","cljs.core.sorted_set","aoc.year2018.day07/get-works-with-no-parents","requirements-map","no-parents","clojure.data/diff","cljs.core.apply","clojure.set/union","cljs.core/vals","cljs.core/set","cljs.core/keys","cljs.core/first","cljs.core/str","cljs.core.into","aoc.year2018.day07/get-done-workers","workers","cljs.core.filter","worker","cljs.core.not_EQ_","aoc.year2018.day07/get-jobs","p1__42433#","p1__42434#","aoc.year2018.day07/get-next-requirements","done-jobs","requirements","cljs.core/empty?","p__42435","vec__42436","key","value","cljs.core/disj","aoc.year2018.day07/get-next-works","state","p__42440","vec__42441","_","cljs.core._EQ_","p1__42439#","cljs.core.sort","aoc.year2018.day07/remove-done-jobs","prev-req","cljs.core.partial","cljs.core/dissoc","aoc.year2018.day07/decrease-worker","new-state","p1__42444#","x","p1__42445#","p1__42446#","p1__42447#","todo","aoc.year2018.day07/iterate-workers","get-time-per-alphabet","jobs","cljs.core/iterate","cljs.core/assoc-in","job","cljs.core/peek","worker-available?","cljs.core/count","cljs.core/pop","results","aoc.year2018.day07/get-next-worker-state","p1__42448#","cljs.core.drop_while","aoc.year2018.day07/assign-job-to-workers","current-works","p1__42449#","cljs.core/reverse","p1__42450#","cljs.core/not","cljs.core/some","assign-new-job","old-jobs","aoc.year2018.day07/assign-new-job","aoc.year2018.day07/update-status","p1__42451#","aoc.year2018.day07/get-next-state-part-2","cljs.core/inc","aoc.year2018.day07/get-solution","last-status","p1__42452#","aoc.year2018.day07/get-initial-state","worker-count","alphabet-fn","works-with-no-parents","todo-jobs","cljs.core.merge","cljs.core.repeat"],"sourcesContent":["(ns aoc.year2018.day07\n  (:require [clojure.data :as data]\n            [clojure.set :as set]\n            [clojure.string :as str]))\n\n(comment \"Part 1: \uc791\uc5c5\ub9c8\ub2e4 \ub514\ud39c\ub358\uc2dc\uac00 \uc788\ub294 \uc791\uc5c5 \ubaa9\ub85d\uc774 \uc788\uc744 \ub54c \ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc644\ub8cc\ub410\uc744 \ub54c \uc791\uc5c5\uc744 \uc644\ub8cc\ud55c \uc21c\uc11c\ub300\ub85c \ucd9c\ub825\ud558\ub77c.\n          \uac19\uc740 \ub514\ud39c\ub358\uc2dc\uac00 \uc788\ub294 \uc791\uc5c5\uc758 \uacbd\uc6b0 \uc54c\ud30c\ubcb3 \uc21c\uc11c\ub85c \uba3c\uc800 \ucc98\ub9ac\ud55c\ub2e4.\")\n(comment \"Part 2: \ucd1d 5\uac1c\uc758 \uc6cc\ucee4\uac00 \uc788\uc744 \ub54c \ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc644\ub8cc\ub41c \uc2dc\uac04\uc744 \uad6c\ud558\ub77c.\")\n\n(defn get-requirements-map\n  \"desc: input \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c {'letter': #{dependencies}} \ub9f5\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n   1. \uc815\uaddc\uc2dd\uc73c\ub85c 1) \uc791\uc5c5 \uc774\ub984 2) \ud574\ub2f9 \uc791\uc5c5\uc744 \ud558\uae30 \uc704\ud574 \uba3c\uc800 \ud574\uc57c \ud558\ub294 \uc791\uc5c5 \uc774\ub984 \uc21c\uc11c\ub85c \uac00\uc838\uc628 \ud6c4,\n   2. \uc791\uc5c5 \uc774\ub984 \ubcc4 {K V} \ud615\ud0dc\uc758 \uc758\uc874\uc131 \ubaa9\ub85d\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. K\ub294 \uc791\uc5c5 \uc774\ub984, V\ub294 K\ub97c \uc644\ub8cc\ud558\uae30 \uc704\ud574 \uba3c\uc800 \ud574\uc57c \ud560 \uc758\uc874\uc131 \ubaa9\ub85d\uc785\ub2c8\ub2e4.\n   input: resource/aoc/year2018/day07.txt\n   output: {'Q' #{'B' 'F' 'G' 'K' 'N'},\n   'L' #{'C' 'J' 'Q' 'V' 'Y'},\n   'J' #{'D' 'H' 'K' 'U' 'Y'},\n   'M' #{'D' 'G' 'J' 'P'},\n   'S' #{'G' 'M'},\n   ...\"\n  [content]\n  (->> content\n       (re-seq #\"Step ([A-Z]) must be finished before step ([A-Z]) can begin.\")\n       (map #(rest %))\n       (reduce\n         (fn [acc [first-id second-id]]\n           (if (contains? acc second-id)\n             (update acc second-id (fn [v] (conj v first-id)))\n             (assoc acc second-id (sorted-set first-id)))) {})))\n\n(defn get-works-with-no-parents\n  \"desc: \uc2dc\uc791\ucca8\uc744 \ucc3e\uae30 \uc704\ud574 \ubd80\ubaa8\uac00 \uc5c6\ub294 \ub178\ub4dc\ub97c \uad6c\ud569\ub2c8\ub2e4\n   1. \ubd88\ub7ec\uc628 \uc758\uc874\uc131 \ub9f5\uc744 \ubc14\ud0d5\uc73c\ub85c, map\uc758 value \uc5d0\ub294 \uc788\uc9c0\ub9cc key \uc5d0\ub294 \uc5c6\ub294 \uc601\ubb38\uc790\ub97c \uad6c\ud569\ub2c8\ub2e4.\n   2. \uadf8\uac83\uc744 vector \ub85c \ud569\uccd0\uc11c \ubc18\ud658\ud569\ub2c8\ub2e4.\n   input: {'Q' #{'B' 'F' 'G' 'K' 'N'},\n   'L' #{'C' 'J' 'Q' 'V' 'Y'},\n   'J' #{'D' 'H' 'K' 'U' 'Y'},\n   'M' #{'D' 'G' 'J' 'P'},\n   'S' #{'G' 'M'},\n   ...\n   output: ['G' 'K' 'T' 'V']\"\n  [requirements-map]\n  (let [no-parents\n        (->>\n          (data/diff (apply set/union (vals requirements-map)) (set (keys requirements-map)))\n          first)]\n    (->> no-parents\n         (map str)\n         (into []))))\n\n(defn get-done-workers\n  \"desc: \uc791\uc5c5\uc774 \ubaa8\ub450 \ub05d\ub098\uc11c \ub300\uae30\uc911\uc778 worker \ub97c \uac00\uc838\uc635\ub2c8\ub2e4\n   worker \ubaa9\ub85d vector \ub97c \uc21c\ud658\ud558\uba74\uc11c \uc6cc\ucee4\uc758 \ub0a8\uc740 \uc2dc\uac04\uc774 0 \uc774\ud558\uc774\uba74\uc11c job\uc774 nil\uc774 \uc544\ub2cc \uac83\uc744 \uac00\uc838\uc635\ub2c8\ub2e4.\n   input: [{:time 60, :job 'A'} {:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil}]\n   output: ({:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil})\"\n  [workers]\n  (filter (fn [worker] (and (>= 0 (:time worker)) (not= :job nil))) workers))\n\n(defn get-jobs\n  \"desc: \uc791\uc5c5\uc774 \ubaa8\ub450 \ub05d\ub09c \uc6cc\ucee4\ub85c\ubd80\ud130 \ub05d\ub09c \uc791\uc5c5 \uc774\ub984\uc744 \uac00\uc838\uc635\ub2c8\ub2e4\n   1. get-done-workers \ud568\uc218\ub97c \ud638\ucd9c\ud574 \ub05d\ub09c \uc6cc\ucee4\ub97c \ubaa8\ub450 \uac00\uc838\uc635\ub2c8\ub2e4\n   2. \uc791\uc5c5 \uc774\ub984 \uc911 nil \uc774 \uc544\ub2cc \uac83\uc744 \uc81c\uc678\uc2dc\ud0b5\ub2c8\ub2e4\n   3. map \ud568\uc218\ub97c \uc774\uc6a9\ud574 \uc791\uc5c5 \uc774\ub984\ub9cc \uac00\uc838\uc635\ub2c8\ub2e4\n   input: ({:time 0, :job M} {:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil})\n   output: (M)\"\n  [workers]\n  (->> workers\n       get-done-workers\n       (filter #(not= (:job %) nil))\n       (map #(:job %))))\n\n(defn get-next-requirements\n  \"desc: \ub05d\ub09c \uc77c\uc744 \ud574\uc57c\ud560 \uc77c \ubaa9\ub85d\uc758 \uc758\uc874\uc131\uc744 \uc81c\uac70\ud574\uc11c \ub2e4\uc74c \ud574\uc57c\ud560 \uc77c \ubaa9\ub85d\uc744 \ub9cc\ub4ed\ub2c8\ub2e4\n   1. \ub05d\ub09c \uc77c\uc774 \uc5c6\ub2e4\uba74 \ud604\uc7ac \ud560\uc77c \ubaa9\ub85d\uc744 \uadf8\ub300\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4.\n   2. \ub05d\ub09c \uc77c\uc774 \uc788\ub2e4\uba74, \ud560\uc77c \ubaa9\ub85d\uc758 \uc758\uc874\uc131 \ubaa9\ub85d\uc5d0\uc11c \uc81c\uac70\ud55c \uc0c8\ub85c\uc6b4 \ud560\uc77c \ubaa9\ub85d\uc744 \ub9cc\ub4ed\ub2c8\ub2e4\n   3. map \uc73c\ub85c \uc5ee\uc5b4\uc11c \ubc18\ud658\ud569\ub2c8\ub2e4.\n   input: (G), {Q #{}, L #{Q}, Z #{A E L O Q W}, E #{A L Q}, O #{L}, A #{L O Q}, W #{A E L Q}}\n   output: {Q #{}, L #{Q}, Z #{A E L O Q W}, E #{A L Q}, O #{L}, A #{L O Q}, W #{A E L Q}}\"\n  [done-jobs requirements]\n  (if (empty? done-jobs)\n    requirements\n    (->> (map (fn [[key value]] {key (apply disj value done-jobs)}) requirements)\n         (into {}))))\n\n(defn get-next-works\n  \"desc: \ud560 \uc77c \ubaa9\ub85d\uc5d0\uc11c \ub2e4\uc74c \ud560 \uc77c\uc744 \uac00\uc838\uc635\ub2c8\ub2e4.\n   \ub2e4\uc74c \ud560 \uc77c\uc740 \ud560 \uc77c \ubaa9\ub85d\uc5d0\uc11c \uc758\uc874\uc131\uc774 \uc5c6\ub294 \uc77c\uc774 \ub2e4\uc74c \ud560 \uc77c\uc774\ub77c\uace0 \uc815\uc758\ud588\uc2b5\ub2c8\ub2e4.\n   \ub530\ub77c\uc11c \uc774 \ud568\uc218\uc5d0\uc11c\ub294,\n   1. \ud560 \uc77c \ubaa9\ub85d\uc744 \uc21c\ud68c\ud558\uba74\uc11c \n   2. \uc758\uc874\uc131\uc774 \uc5c6\ub294 \uac83\uc758 \uc791\uc5c5 \uc774\ub984(=> map\uc758 key) \ub97c \uac00\uc838\uc628 \ud6c4 \n   3. \uc54c\ud30c\ubcb3 \uc21c\uc73c\ub85c \uc815\ub82c\ud574\n   4. \ubca1\ud130\uc5d0 \ub2f4\uc544 \ubc18\ud658\ud569\ub2c8\ub2e4.\n   input: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\n   output {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\"\n  [state]\n  (->> (:todo state)\n       (filter (fn [[_ v]] (= v #{})))\n       (map #(first %))\n       sort\n       (into [])))\n\n(defn remove-done-jobs\n  \"desc: \ub05d\ub09c \uc791\uc5c5\uc744 \ub2e4\uc74c \ud560\uc77c \ubaa9\ub85d\uc5d0\uc11c \uc0ad\uc81c\ud569\ub2c8\ub2e4.\n   \ud604\uc7ac \uc791\uc5c5 \ubaa9\ub85d\uacfc \ub05d\ub09c \uc791\uc5c5 \ubaa9\ub85d\uc744 \ubc14\ud0d5\uc73c\ub85c,\n   1. \ub05d\ub09c \uc791\uc5c5 \uae30\ubc18\uc73c\ub85c \ub2e4\uc74c \ud560\uc77c \ubaa9\ub85d\uc744 \ub9cc\ub4dc\ub294 get-next-requirements \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. \uc774 \ub54c \ub05d\ub09c \uc77c\uc774 \uc758\uc874\uc131(=> map\uc758 value) \uc5d0\uc11c \uc0ad\uc81c\ub41c \ub2e4\uc74c \ud560\uc77c \ubaa9\ub85d\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4\n   2. \ub05d\ub09c \uc791\uc5c5\uc740 \uc758\uc874\uc131 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ud560\uc77c \ubaa9\ub85d\uc5d0\uc11c \uc644\uc804\ud788 \uc0ad\uc81c\ud574\uc57c \ud558\ubbc0\ub85c, map\uc758 key \uae4c\uc9c0 \uc0ad\uc81c\ud569\ub2c8\ub2e4.\n   input: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}, [G K T V]\n   output {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\"\n  [state done-jobs]\n  (update state :todo (fn [prev-req] (apply (partial dissoc (get-next-requirements done-jobs prev-req)) done-jobs))))\n\n(defn decrease-worker\n  \"desc: \uc6cc\ucee4\uac00 \uc791\uc5c5\uc911\uc774\ub77c\uba74 \uc2dc\uac04\uc744 1 \uac10\uc18c\uc2dc\ud0b5\ub2c8\ub2e4.\n   1. \ud604\uc7ac worker \ubaa9\ub85d\uc744 \ubd88\ub7ec\uc628 \ud6c4 \uc2dc\uac04\uc774 -1\uc774 \uc544\ub2cc \uac83(=> \uc77c\ud558\uace0 \uc788\ub294 \uac83) \uc758 \uc2dc\uac04\uc744 1\uc529 \uc0ad\uc81c\ud55c \ub4a4 state \uc5d0 update \ud569\ub2c8\ub2e4\n   2. 1\uc5d0\uc11c update \ub41c \ubaa9\ub85d\uc744 \ubc14\ud0d5\uc73c\ub85c, \ub05d\ub09c \uc791\uc5c5\uc744 \uac00\uc838\uc635\ub2c8\ub2e4. worker \uc911\uc5d0\uc11c \uc2dc\uac04\uc774 0\uc778 \uac83\uc758 job \uc774\ub984\uc744 \uac00\uc838\uc640 \ubca1\ud130\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc744 `done-jobs` \ub77c \ud569\ub2c8\ub2e4.\n   3. \uc2dc\uac04\uc774 0\uc778 \uc6cc\ucee4\ub97c {:time -1 :job nil} \ud615\ud0dc\ub85c \uc5c5\ub370\uc774\ud2b8 \uc2dc\ud0b5\ub2c8\ub2e4\n   4. 2\uc5d0\uc11c \uac00\uc838\uc628 \ub05d\ub09c \ubaa9\ub85d\uc744 \ubc14\ud0d5\uc73c\ub85c, get-next-requirements \ud568\uc218\ub97c \ud638\ucd9c\ud574 \ub05d\ub09c \uc791\uc5c5\uc744 \ud560\uc77c \ubaa9\ub85d\uc758 \uc758\uc874\uc131 \ubaa9\ub85d(=> map\uc758 value)\uc5d0\uc11c \uc0ad\uc81c\uc2dc\ud0b5\ub2c8\ub2e4\n   5. remove-done-jobs \ud568\uc218\ub97c \ud638\ucd9c\ud574\uc11c \ub05d\ub09c \uc791\uc5c5\uc744 \uc758\uc874\uc131 \ubaa9\ub85d \ubfd0\ub9cc \uc544\ub2c8\ub77c key \uae4c\uc9c0 \uc0ad\uc81c\ud569\ub2c8\ub2e4.\n   input: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\n   output {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\"\n  [state]\n  (let [new-state (-> state (update :workers #(map (fn [x] (if (not= (:time x) -1) {:job (:job x) :time (dec (:time x))} x)) %)))\n        done-jobs (into [] (map #(:job %) (filter #(= (:time %) 0) (:workers new-state))))]\n    (-> new-state\n        (update :workers (fn [workers] (into [] (map #(if (= (:time %) 0) {:time -1 :job nil} %) workers))))\n        (update :todo (fn [todo] (into [] (get-next-requirements done-jobs (into [] todo)))))\n        (remove-done-jobs done-jobs))))\n\n(defn iterate-workers\n  \"jobs\uc5d0 \ud56d\ubaa9\uc774 \uc874\uc7ac\ud560 \ub54c, \ud560 \uc77c\uc774 \uc5c6\ub294 \uc6cc\ucee4\uc5d0 \uc5b4\uc0ac\uc778 \ud569\ub2c8\ub2e4.\n   1. job \ubaa9\ub85d\uc5d0\uc11c \ud574\uc57c \ud560 \uc77c\uc744 \ud558\ub098 \uaebc\ub0c5\ub2c8\ub2e4\n   2. \uc77c\uc744 \ud558\uace0\uc788\uc9c0 \uc54a\uc740 \uc6cc\ucee4\uc5d0\uac8c \uc5b4\uc0ac\uc778\uc744 \ud569\ub2c8\ub2e4. \uc6cc\ucee4\uc5d0\uac8c \uc5b4\uc0ac\uc778 \ud588\uac70\ub098 \ud558\uc9c0 \uc54a\uc558\ub354\ub77c\ub3c4 \uc6cc\ucee4\ub97c pop \ud574\uc11c \ub2e4\uc74c \uc0c1\ud0dc\uc5d0\uc11c\ub294 \uc6cc\ucee4\uac00 \ub450 \ubc88 \ucc98\ub9ac\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n   3. \ud574\ub2f9 \uc7a1\uc744 \uc5b4\uc0ac\uc778 \ud588\ub2e4\uba74, pop \ud574\uc11c \ub2e4\uc74c \uc0c1\ud0dc\uc5d0\uc11c\ub294 \ud574\ub2f9 \uc7a1\uc774 \ucc98\ub9ac\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc7a1\uc774 \uc5b4\uc0ac\uc778\ub418\uc9c0 \uc54a\uc558\ub2e4\uba74 pop \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\"\n  [get-time-per-alphabet jobs workers]\n  (iterate\n    (fn [state]\n      (if (empty? (:workers state))\n        (-> state\n            (assoc-in [:status] :done))\n        (let [job (peek (:jobs state))\n              worker (peek (:workers state))\n              worker-available? (and (= (:job worker) nil) (> (count (:jobs state)) 0))]\n          (-> state\n              (update :jobs (fn [jobs] (if worker-available? (pop jobs) jobs)))\n              (update :resulting-worker\n                      (fn [results]\n                        (if worker-available?\n                          (conj results {:time (get-time-per-alphabet job) :job job})\n                          (conj results worker))))\n              (update :workers pop)))))\n    {:status :in-progress :jobs jobs :workers workers :resulting-worker []}))\n\n(defn get-next-worker-state\n  \"jobs\uc5d0 \ud56d\ubaa9\uc774 \uc874\uc7ac\ud560 \ub54c, \ud560 \uc77c\uc774 \uc5c6\ub294 \uc6cc\ucee4\uc5d0 \uc5b4\uc0ac\uc778 \ud569\ub2c8\ub2e4.\n   1. job \ubaa9\ub85d\uc5d0\uc11c \ud574\uc57c \ud560 \uc77c\uc744 \ud558\ub098 \uaebc\ub0c5\ub2c8\ub2e4\n   2. \uc77c\uc744 \ud558\uace0\uc788\uc9c0 \uc54a\uc740 \uc6cc\ucee4\uc5d0\uac8c \uc5b4\uc0ac\uc778\uc744 \ud569\ub2c8\ub2e4. \uc6cc\ucee4\uc5d0\uac8c \uc5b4\uc0ac\uc778 \ud588\uac70\ub098 \ud558\uc9c0 \uc54a\uc558\ub354\ub77c\ub3c4 \uc6cc\ucee4\ub97c pop \ud574\uc11c \ub2e4\uc74c \uc0c1\ud0dc\uc5d0\uc11c\ub294 \uc6cc\ucee4\uac00 \ub450 \ubc88 \ucc98\ub9ac\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n   3. \ud574\ub2f9 \uc7a1\uc744 \uc5b4\uc0ac\uc778 \ud588\ub2e4\uba74, pop \ud574\uc11c \ub2e4\uc74c \uc0c1\ud0dc\uc5d0\uc11c\ub294 \ud574\ub2f9 \uc7a1\uc774 \ucc98\ub9ac\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc7a1\uc774 \uc5b4\uc0ac\uc778\ub418\uc9c0 \uc54a\uc558\ub2e4\uba74 pop \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n   input: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\n   output: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n            :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\"\n  [state get-time-per-alphabet jobs]\n  (update\n    state\n    :workers\n    (fn [workers]\n      (->> (iterate-workers get-time-per-alphabet jobs workers)\n           (drop-while #(not= (:status %) :done))\n           first\n           :resulting-worker))))\n\n(defn assign-job-to-workers\n  \"desc: \ucc98\ub9ac\ud574\uc57c \ud558\ub294 \uc791\uc5c5\ub4e4\uc744 \ub300\uae30\uc911\uc778 worker \uc5d0\uac8c \ud560\ub2f9\ud569\ub2c8\ub2e4\n   1. \ud604\uc7ac \uc6cc\ucee4\uac00 \uac16\uace0 \uc788\ub294 \uc791\uc5c5 \uc774\ub984\uc744 `current-works` \ub77c\uace0 \ud569\ub2c8\ub2e4.\n   2. get-next-works \ud568\uc218\uc5d0\uc11c \ubd88\ub7ec\uc628 \ub2e4\uc74c \ud560\uc77c \ubaa9\ub85d\uc5d0\uc11c, \ud604\uc7ac \uc6cc\ucee4\uac00 \uac16\uace0 \uc788\ub294 \uc77c\uc744 \uc81c\uc678\uc2dc\ud0a8 `jobs` \ubca1\ud130\ub97c \uc120\uc5b8\ud569\ub2c8\ub2e4.\n   3. get-next-worker-state \ud568\uc218\ub97c \ud1b5\ud574 \uc0c8\ub85c\uc6b4 \uc791\uc5c5\uc744 \uc6cc\ucee4\uc5d0 \uc5b4\uc0ac\uc778 \ud569\ub2c8\ub2e4.\n   4. 3\ubc88 \uacfc\uc815\uc5d0\uc11c \uc5bb\uc5b4\uc628 \uc218\uc815\ub41c \uc6cc\ucee4 \ubaa9\ub85d\uc744 state\uc5d0 update \ud569\ub2c8\ub2e4.\n   5. \ucc98\ub9ac\ud55c \uc791\uc5c5 \ubaa9\ub85d\uc744 \ub73b\ud558\ub294 :jobs \ubca1\ud130\uc5d0 \ucc98\ub9ac\ud55c \uc791\uc5c5\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 part 1 \ubb38\uc81c\ub97c \ud478\ub294\ub370 \ud65c\uc6a9\ub418\ub294 \ubca1\ud130\uc785\ub2c8\ub2e4.\n   input: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\n   output {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\"\n  [state]\n  (let [current-works (into [] (map #(:job %) (:workers state)))\n        jobs (into [] (reverse (filter #(not (some (fn [v] (= v %)) current-works)) (get-next-works state))))\n        assign-new-job (fn [old-jobs] (if (peek jobs) (conj old-jobs (peek jobs)) old-jobs))]\n    (if (pos? (count jobs))\n      (-> state\n          (get-next-worker-state (:get-time-per-alphabet state) jobs)\n          (update :jobs assign-new-job))\n      state)))\n\n(defn assign-new-job\n  \"desc: \uc0c8\ub85c\uc6b4 \uc791\uc5c5\uc744 \uc6cc\ucee4\uc5d0\uac8c \ud560\ub2f9\ud569\ub2c8\ub2e4\n   1. get-done-workers \ud568\uc218\ub97c \uc774\uc6a9\ud574 \ub05d\ub09c \uc791\uc5c5\uc744 \uac00\uc838\uc628 \ud6c4 get-jobs \ud568\uc218\ub85c \uc791\uc5c5 \uc774\ub984\ub9cc \uac00\uc838\uc635\ub2c8\ub2e4. \uc774\ub97c `done-jobs` \ub77c \ud569\ub2c8\ub2e4.\n   2. \ub05d\ub09c \uc791\uc5c5\uc744 \ud560\uc77c \ubaa9\ub85d\uc5d0\uc11c \uc0ad\uc81c\ud569\ub2c8\ub2e4\n   3. assign-job-to-workers \ud568\uc218\ub97c \ud638\ucd9c\ud574 \uc0c8\ub85c\uc6b4 \uc791\uc5c5\uc744 \ub9e1\uae41\ub2c8\ub2e4.\n   input: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\n   output: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n            :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\"\n  [state]\n  (let [done-jobs (get-jobs (get-done-workers (:workers state)))]\n    (-> state\n        (remove-done-jobs done-jobs)\n        assign-job-to-workers)))\n\n(defn update-status\n  \"desc: \ud560\uc77c \ubaa9\ub85d\uc774 \ubaa8\ub450 \ube44\uc5c8\ub2e4\uba74 state\uc758 status\ub97c :done \uc73c\ub85c \ubcc0\uacbd\ud569\ub2c8\ub2e4.\"\n  [state]\n  (update state :status #(if (empty? (:todo state)) :done %)))\n\n(defn get-next-state-part-2\n  \"desc: iterate \ub97c \ud558\uba74\uc11c \ub2e4\uc74c \uc0c1\ud0dc\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\n  1. \uc77c\ud558\uace0 \uc788\ub294 \ubaa8\ub4e0 \uc6cc\ucee4\uc758 \uc2dc\uac04\uc744 1\ucd08 \uae4e\uc2b5\ub2c8\ub2e4.\n  2. \uc0c8\ub85c\uc6b4 \uc77c\uc744 \ucc3e\uc544 \uc77c\uc744 \uc548\ud558\uace0 \uc788\ub294 \uc6cc\ucee4\uc5d0\uac8c \uc5b4\uc0ac\uc778 \ud569\ub2c8\ub2e4.\n  3. \ub9cc\uc57d \ubaa8\ub4e0 \uc77c\uc744 \uc644\ub8cc\ud588\ub2e4\uba74 status\ub97c :done \uc73c\ub85c \ubc14\uafc9\ub2c8\ub2e4.\n  4. \uc2dc\uac04\uc744 1\ucd08 \ud750\ub974\uac8c \ud569\ub2c8\ub2e4.\n   input: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n           :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}, [G K T V]\n   output: {:todo {A #{B C H L O P Q U X Y} B #{} ...}}, :workers [{:time -1, :job nil} ...], \n            :status :in-progress, :time -1, :jobs [], :no-parent-cursor 0, :works-with-no-parents [G K T V]}\"\n  [state]\n  (-> state\n      decrease-worker\n      assign-new-job\n      update-status\n      (update :time inc)))\n\n(defn get-solution\n  \"desc: worker \uac2f\uc218\uc640 \ubb38\uc790\ubcc4 \uac78\ub9ac\ub294 \uc2dc\uac04\uc744 \uad6c\ud558\ub294 \ud568\uc218\ub97c \uc785\ub825\uc73c\ub85c \ubc1b\uc544, \uc791\uc5c5\uc774 \uc804\uccb4 \ub05d\ub0a0\ub54c\uc758 \uc0c1\ud0dc\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n   input: 5, (fn [word] ...)\n   output: {:todo {},\n            :workers [{:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil} {:time -1, :job nil}],\n            :status :done,\n            :get-time-per-alphabet #function[aoc.year2018.day07/eval7147/fn--7148],\n            :time 1265,\n            :jobs (...)}\"\n  [state]\n  (let [state state\n        last-status (->> (drop-while #(not= (:status %) :done) (iterate get-next-state-part-2 state)) first)]\n    last-status))\n\n(defn get-initial-state\n  [worker-count alphabet-fn content]\n  (let [requirements-map (get-requirements-map content)\n        works-with-no-parents (into '() (reverse (get-works-with-no-parents requirements-map)))\n        todo-jobs (merge (into {} (map (fn [v] [v #{}]) works-with-no-parents)) requirements-map)]\n    {:todo                  todo-jobs\n     :workers               (into [] (repeat worker-count {:time -1 :job nil}))\n     :status                :in-progress\n     :get-time-per-alphabet alphabet-fn\n     :time                  -1}))\n\n(comment\n  ; Part 1\n  (->> (get-initial-state 1 (fn [_] 1) (slurp \"resource/aoc/year2018/day07.txt\"))\n       get-solution\n       :jobs\n       (into '())\n       (str/join \"\"))\n\n  ; Part 2\n  (->> (get-initial-state 5 (fn [alphabet] (- (int (.charAt alphabet 0)) 4)) (slurp \"resource/aoc/year2018/day07.txt\"))\n       get-solution\n       :time))\n"]}